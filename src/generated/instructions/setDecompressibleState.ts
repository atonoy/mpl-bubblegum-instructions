/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { DecompressibleState, decompressibleStateBeet } from '../types/DecompressibleState';

/**
 * @category Instructions
 * @category SetDecompressibleState
 * @category generated
 */
export type SetDecompressibleStateInstructionArgs = {
  decompressableState: DecompressibleState;
};
/**
 * @category Instructions
 * @category SetDecompressibleState
 * @category generated
 */
export const setDecompressibleStateStruct = new beet.BeetArgsStruct<
  SetDecompressibleStateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['decompressableState', decompressibleStateBeet],
  ],
  'SetDecompressibleStateInstructionArgs',
);
/**
 * Accounts required by the _setDecompressibleState_ instruction
 *
 * @property [_writable_] treeAuthority
 * @property [**signer**] treeCreator
 * @category Instructions
 * @category SetDecompressibleState
 * @category generated
 */
export type SetDecompressibleStateInstructionAccounts = {
  treeAuthority: web3.PublicKey;
  treeCreator: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const setDecompressibleStateInstructionDiscriminator = [82, 104, 152, 6, 149, 111, 100, 13];

/**
 * Creates a _SetDecompressibleState_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetDecompressibleState
 * @category generated
 */
export function createSetDecompressibleStateInstruction(
  accounts: SetDecompressibleStateInstructionAccounts,
  args: SetDecompressibleStateInstructionArgs,
  programId = new web3.PublicKey('BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'),
) {
  const [data] = setDecompressibleStateStruct.serialize({
    instructionDiscriminator: setDecompressibleStateInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.treeAuthority,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treeCreator,
      isWritable: false,
      isSigner: true,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
